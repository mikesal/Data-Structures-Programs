// FILE: IntSet.cpp - header file for IntSet class
//       Implementation file for the IntStore class
//       (See IntSet.h for documentation.)
// INVARIANT for the IntSet class:
// (1) Distinct int values of the IntSet are stored in a 1-D,
//     compile-time array whose size is IntSet::MAX_SIZE;
//     the member variable data references the array.
// (2) The distinct int value with earliest membership is stored
//     in data[0], the distinct int value with the 2nd-earliest
//     membership is stored in data[1], and so on.
//     Note: No "prior membership" information is tracked; i.e.,
//           if an int value that was previously a member (but its
//           earlier membership ended due to removal) becomes a
//           member again, the timing of its membership (relative
//           to other existing members) is the same as if that int
//           value was never a member before.
//     Note: Re-introduction of an int value that is already an
//           existing member (such as through the add operation)
//           has no effect on the "membership timing" of that int
//           value.
// (4) The # of distinct int values the IntSet currently contains
//     is stored in the member variable used.
// (5) Except when the IntSet is empty (used == 0), ALL elements
//     of data from data[0] until data[used - 1] contain relevant
//     distinct int values; i.e., all relevant distinct int values
//     appear together (no "holes" among them) starting from the
//     beginning of the data array.
// (6) We DON'T care what is stored in any of the array elements
//     from data[used] through data[IntSet::MAX_SIZE - 1].
//     Note: This applies also when the IntSet is empry (used == 0)
//           in which case we DON'T care what is stored in any of
//           the data array elements.
//     Note: A distinct int value in the IntSet can be any of the
//           values an int can represent (from the most negative
//           through 0 to the most positive), so there is no
//           particular int value that can be used to indicate an
//           irrelevant value. But there's no need for such an
//           "indicator value" since all relevant distinct int
//           values appear together starting from the beginning of
//           the data array and used (if properly initialized and
//           maintained) should tell which elements of the data
//           array are actually relevant.

#include "IntSet.h"
#include <iostream>
#include <cassert>
using namespace std;

IntSet::IntSet()
{
   used = 0;
}

int IntSet::size() const
{
  return used;
}


bool IntSet::isEmpty() const
{
   if(used == 0)
      return true;
   else
      return false;
}

bool IntSet::contains(int anInt) const
{
   bool found = false;

   if(isEmpty())
	    return found;
   //Iterates through the invoking set, if the integer is
   //found in the set, found is set to true and returned.
   for(int i = 0; i < used && found != true; i++)
   {
      if(data[i] == anInt)
      {
         found = true;
	       return found; 
      }
   }

   return found;
}

bool IntSet::isSubsetOf(const IntSet& otherIntSet) const
{
   bool found = false;
    
   //otherIntSet size variable added for simplicity. 
   int size2 = otherIntSet.size();

   if(used > size2)
      return found;
   
   //If both sets are empty, by definition they are subsets of
   //each other. True is returned immediately.
   if(isEmpty() && otherIntSet.isEmpty())
   {
      found = true;
      return found;
   }   
   
   //Iterates through both sets, if an integer exists in one
   //set but not the other, loop is exited and false is returned.
   //Otherwise, both sets are looped through and found is returned.
   for(int i = 0; i < used; i++)
   {
      bool present = false;

      for(int j = 0; j < size2; j++)
      {
        if(data[i] == otherIntSet.data[j])
          present = true;
        if(present == true)
          j = size2;
      }
	    
       if(present == false)
          i = used;
       else if(present == true && i == (used-1))
          found = true;
       else
          present = false;
   }
	
   return found;
}

void IntSet::DumpData(ostream& out) const
{  // already implemented ... DON'T change anything
   if (used > 0)
   {
      out << data[0];
      for (int i = 1; i < used; ++i)
         out << "  " << data[i];
   }
}

IntSet IntSet::unionWith(const IntSet& otherIntSet) const
{  
   //Creates clone set of the invoking set.
   IntSet cloneSet = *this;
   
   if((size() + otherIntSet.size()) > MAX_SIZE)
   {
      cout << "Union exceeds maximum set size." << endl;
      return cloneSet;
   }
   //Iterates through the invoking set and compares the integers 
   //in the otherIntSet to the current integers in the invoking set.
   //If there are numbers extant in the otherIntSet that are absent
   //in the invoking set, those integers are added. Resulting clone
   // set is returned.
   for(int i = 0; i < otherIntSet.size(); i++)
   {
      if(!contains(otherIntSet.data[i]))
         cloneSet.add(otherIntSet.data[i]);
   }

   return cloneSet;
}

IntSet IntSet::intersect(const IntSet& otherIntSet) const
{  
   //Creates an instance of the IntSet class.
   IntSet altSet;
   
   //Iterates through the invoking set and the otherIntSet. If
   //an integer is found in both of the sets, it is copied to the
   //instance, altSet is returned.
   for(int i = 0; i < otherIntSet.size(); i++)
   {
      if(contains(otherIntSet.data[i]))
         altSet.add(otherIntSet.data[i]);
   }

   return altSet;
}

IntSet IntSet::subtract(const IntSet& otherIntSet) const
{
   //Creates a clone set of the invoking set.
   IntSet altSet = *this;

   //Iterates through otherIntSet and if the integer in the 
   //current element matches that of the integer in the invoking
   //set, the integer is removed from the clone set. 
   //Clone set is returned.
   for(int i = 0; i < used; i++)
   {
      if(otherIntSet.contains(data[i]))
         altSet.remove(data[i]);
   }

   return altSet;
}

void IntSet::reset()
{
   used = 0;
}

bool IntSet::add(int anInt)
{
   if(used >= MAX_SIZE)
   {
      cout << "Set is full." << endl;
      return false;
   }
   
   //If the integer is not already in the set, the requested
   //integer is added to the set.
   if(!contains(anInt))
   {
      data[used] = anInt;
      used++;
      return true;
   }
   else
      return false;
}

bool IntSet::remove(int anInt)
{
   bool removed = false;

   if(!contains(anInt))
      return removed;
   
   //Iterates through the invoking data set, finds the desired
   //integer, replaces it with newest neighboring integer.
   //Repeats until set is correct.
   for(int i = 0; i < used; i++)
   {
      if(data[i] == anInt)
      {
         for(int j = i; j < used; j++)
         {
            data[j] = data[i + 1];
            i++;
         }

         used--;
         removed = true;
      }  
   }

   return removed;

}

bool equal(const IntSet& is1, const IntSet& is2)
{
   bool equal = false;
   
   //If sets are not equal in size, return false.
   if(is1.size() != is2.size())
      return equal;
   
   //If both sets are subsets of each other, they are equal;
   //function returns true;
   if(is1.isSubsetOf(is2) && is2.isSubsetOf(is1))
      equal = true;

   return equal;
}
